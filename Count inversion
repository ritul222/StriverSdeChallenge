import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        int low=0;
        int high=n-1;
        long k=mergesort(arr,low,high);
        return k;
    }
    static long mergesort(long arr[],int low,int high)
    {
        long inv=0;
        if(low<high)
        {
            int mid=(high+low)/2;
            inv+=mergesort(arr,low,mid);
            inv+=mergesort(arr,mid+1,high);
            inv+=merge(arr,low,mid,high);
            
        }return inv;

    }
    static long merge(long arr[],int low,int mid,int high)
    {
        long inv=0;
        long left[]=new long[mid-low+1];
        long right[]=new long[high-mid];
        int i,j,k;
        for(i=0;i<left.length;i++)
        {
            left[i]=arr[low+i];
        }
        for( j=0;j<right.length;j++)
        {
            right[j]=arr[mid+j+1];
        }
        i=0;j=0;k=low;
        while(i<left.length && j<right.length)
        {
            if(left[i]<=right[j])
            {
                arr[k]=left[i];
                i++;
                k++;
            }
            else{
                arr[k]=right[j];
                j++;
                k++;
                inv+=left.length-i;
            }
            
        }
        while(i<left.length)
        {
            arr[k++]=left[i++];
        }
        while(j<right.length)
        {
            arr[k++]=right[j++];
        }
            return inv;
    }
}
